[alias]
    a = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git add .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git add \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git add \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git add \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    ap = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git add -p .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git add -p \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git add -p \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git add -p \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    r = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git reset .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git reset \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git reset \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git reset \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    ch = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git checkout .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git checkout \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git checkout \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git checkout \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    d = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git diff .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git diff \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git diff \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git diff \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    dc = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git diff --cached .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git diff --cached \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git diff --cached \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git diff --cached \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    ds = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git diff --staged .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git diff --staged \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git diff --staged \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git diff --staged \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    cleaner = !git branch --merged master --no-color | grep -v '^[ *]*master$' | xargs git branch -d
    b     = branch
    ba    = branch -a
    bnc   = branch --no-color
    c     = commit
    ca    = commit --amend # --no-edit
    chp   = cherry-pick
    co   = checkout
    cob   = checkout -B                          # switch to a branch, creating it if necessary
    pmr   = push -o merge_request.create -o merge_request.merge_when_pipeline_succeeds  # push MR
    mt    = mergetool
    reb   = !"r() { git rebase --autosquash -i HEAD~$1; }; r"       # Interactive rebase with the given number of latest commits
    rv    = remote -v
    ss    = status --short
    wip   =  !"wip()  { git add .; git commit -a -m '--wip-- [ci skip]' --no-verify; }; wip"     # basically an immediate commit that u want in you reflog
    wipr  =  !"wipr() { git reset --soft HEAD~; git reset ; }; wipr"   # undo last commit (works well with gwip) - watch out though

    # format -> default/ original time zone (either committer’s or author’s)
    # format-local -> user's local timezone instead
    ll = log --decorate --date=short --pretty=format:'%C(magenta)%h%Creset %C(bold black)%ad%C(reset)%C(auto) %s %C(blue)%an%C(auto) %D%C(reset)'
    l =  ll --topo-order -30 --pretty=format:'%C(magenta)%h%Creset %C(yellow)%ad%C(reset)%C(auto) %s %C(blue)%an %C(bold black)%D%C(reset)'

[core]
  editor = idea -e --wait
  excludesfile = ~/.gitignore_global
  attributesfile = ~/.gitattributes
  whitespace = trailing-space,space-before-tab
  pager = "delta"

[credential]
	helper = osxkeychain

[feature]
    manyFiles = 1

[includeIf "gitdir:~/"]
    path = .gitconfig-private

[init]
	defaultBranch = master

[color]
  ui = always           # Use colors in Git commands that are capable of colored output when outputting to the terminal
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
#  meta = magenta bold
#  frag = cyan bold
#  old = red reverse
#  new = green reverse
#  whitespace = red reverse
[color "status"]
  header = white normal dim
  added = red
  changed = green
  untracked = blue
  branch = yellow

[diff]
    colorMoved = default
    mnemonicprefix = true
    compactionHeuristic = true
    show = delta
[delta]
    file-decoration-style = black ul
    file-style = box gray
    hunk-header-decoration-style = black ul
    hunk-header-style = omit
    line-numbers = true
    line-numbers-left-format = {nm:>3}│
    line-numbers-left-style = black
    line-numbers-minus-style = black
    line-numbers-plus-style = black
    line-numbers-right-format = {np:>3}│
    line-numbers-right-style = black
    line-numbers-zero-style = black
    minus-emph-style = red bold
    minus-empty-line-marker-style = omit
    minus-style = red
    navigate = false
    plus-emph-style = green bold
    plus-empty-line-marker-style = omit
    plus-style = green
    side-by-side = false
    syntax-theme = base16
    true-color = auto
    whitespace-error-style = red reverse
    zero-style = black

[pager]
  show = delta

[merge]
  tool = idea
;   log = true
;   stat = true
;   conflictStyle = diff3
[mergetool]
  keepBackup = false
[mergetool "idea"]
  cmd = idea merge $LOCAL $REMOTE $BASE $MERGED
  trustExitCode = true
[mergetool "meld"]
  cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
;   cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
[mergetool "vscode"]
  cmd = code --wait $MERGED

[interactive]
  diffFilter = delta --color-only --features=interactive

[pull]
  rebase = false

[push]
  default = tracking

[status]
  submoduleSummary = true

[url "git@github.com:"]                   # URL shorthands
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[index]
	skipHash = false
[log]
	follow = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
