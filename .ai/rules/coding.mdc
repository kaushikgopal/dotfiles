---
description: Universal coding excellence standards
globs: "*"
alwaysApply: true
---

## Code Quality Hierarchy
1. **Readability first** - Code is read 10x more than written
2. **Simplicity over cleverness** - Choose obvious over optimal
3. **Intentional architecture** - Every pattern serves a purpose
4. **Fail-fast principles** - Errors should be immediately obvious

## Implementation Standards
- **Single responsibility** - Functions/classes do one thing well
- **Meaningful names** - Variables/functions explain themselves
- **Consistent patterns** - Similar problems → similar solutions
- **No magic numbers/strings** - Use named constants

## Error Handling
- **Explicit over implicit** - Make failure modes visible
- **Fix root causes** - Address symptoms only as temporary measures
- **Defensive programming** - Validate inputs, handle edge cases
- **Graceful degradation** - Partial failure ≠ total failure

## Performance Mindset
- **Measure before optimizing** - Profile, don't guess
- **Algorithmic efficiency** - O(n) matters more than micro-optimizations
- **Resource cleanup** - Close files, connections, free memory
- **Lazy loading** - Load only when needed

## Maintenance Excellence
- **Comments explain why** - Code explains what/how
- **Tests as documentation** - Show expected behavior
- **Version control hygiene** - Atomic commits, clear messages
- **Dependencies minimal** - Every dependency is a liability
