[core]
  editor = vim
  #editor = idea -e --wait
  #excludesfile   = ~/.config/git/ignore
  attributesfile = ~/.config/git/attributes
  whitespace = trailing-space,space-before-tab

[alias]
    # a -> add (with git number)
    # ap -> add --patch
    cane  = !git add . && git commit --amend --no-edit
    branch-cleaner = !git branch --merged master --no-color | grep -v '^[ *]*master$' | xargs git branch -d
    b = branch
    ba = branch -a
    bd = branch -D
    # ch -> checkout (with git number)
    co = checkout
    com = checkout master
    coma = checkout main
    comp = !git checkout master && git pull
    comap = !git checkout main && git pull
    chp = cherry-pick
    cm = commit -m
    cf = commit --fixup
    # d -> diff (with git number)
    # ds -> diff --staged (with git number)
    din   = diff --name-only master...HEAD  # list files that have changed
    # dt -> difftool (with git number)
    mt    = mergetool
    p = pull
    pu = push
    # re -> reset (with git number)
    ss    = status --short

    spu   = stash push # previously stash save
    spo   = stash pop

    wip = !git add . && git commit -a -m "--wip-- [ci skip]" --no-verify
    wipr = !git reset --soft HEAD~ && git reset
    wt = worktree

    l  = !git log --graph --decorate --date=short --topo-order -30 --pretty=format:'%C(magenta)%h%Creset %C(italic brightblack)%ad%C(reset)%C(auto) %s %C(blue)%an%C(auto) %D%C(reset)'
    ll = !git log --graph --decorate --date=short --pretty=format:'%C(magenta)%h%Creset %C(italic brightblack)%ad%C(reset)%C(auto) %s %C(blue)%an%C(auto) %D%C(reset)'

    # compare two commits
    compare = "!compare() { \
        if git merge-base --is-ancestor \"$1\" \"$2\"; then \
            echo \"    $1  ──▶  $2\"; \
            echo \"    $1 is an ancestor of $2\"; \
            echo \"i.e $2 commit was after $1\"; \
        elif git merge-base --is-ancestor \"$2\" \"$1\"; then \
            echo \"    $2  ──▶  $1\"; \
            echo \"    $2 is an ancestor of $1\"; \
            echo \"i.e $1 commit was after $2\"; \
        else \
            echo \"✘   these commits are not related\"; \
        fi; \
    }; compare"


    #### git number support
    a = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git add .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git add \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git add \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git add \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    ap = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git add -p .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git add -p \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git add -p \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git add -p \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    re = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git reset .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git reset \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git reset \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git reset \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    ch = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git checkout .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git checkout \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git checkout \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git checkout \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    d = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git diff .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git diff \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git diff \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git diff \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    dt = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git difftool .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git difftool \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git difftool \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git difftool \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    ds = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git diff --staged .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git diff --staged \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git diff --staged \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git diff --staged \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    # i want to start using diff --staged more than --cached
    # dc = ds


[credential]
	helper = osxkeychain

[feature]
    manyFiles = 1

[color]
  ui = always           # all output (not intended for machine consumption) should always use color

[pull]
  rebase = false

[push]
  default = tracking
  autoSetupRemote = true

[status]
  submoduleSummary = true

[url "git@github.com:"]                   # URL shorthands
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[index]
	skipHash = false
[log]
	follow = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[branch]
	sort = -committerdate
[fetch]
	prune = true

[rebase]
	updateRefs = true
    autosquash = true  # see --fixup


[merge]
  conflictStyle = zdiff3
[mergetool]
  keepBackup = false
[mergetool "cursor"]
  cmd = cursor --wait $MERGED
[mergetool "idea"]
  cmd = idea merge $LOCAL $REMOTE $BASE $MERGED
  trustExitCode = true
[mergetool "meld"]
  cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
[mergetool "vscode"]
  cmd = code --wait $MERGED

#####################
# delta configuation
[core]
    pager = delta
[interactive]
    diffFilter = delta --color-only
[pager]
    show = delta


# ##############################
# difftastic for external tool
[diff]
    # set difftastic as the default difftool, so we don't need to specific `-t difftastic` every time
    tool = difftastic
#     # if you want difftastic as default
#     external = difft
[difftool]
    # run difftool immediately, don't ask 'are you sure' each time
    prompt = false
[difftool "difftastic"]
    # See `man git-difftool` for a description of MERGED, LOCAL and REMOTE.
    cmd = difft "$MERGED" "$LOCAL" "abcdef1" "100644" "$REMOTE" "abcdef2" "100644"




######################
# delta theme config
[delta]
    navigate    = false  # use n and N to move between diff sections
    features    = chameleon
#    syntax-theme = base16
#    file-decoration-style = brightblack ul
#    file-style = box gray
#    hunk-header-decoration-style = brightblack ul
    hunk-header-style = omit
    line-numbers = true
    line-numbers-left-format = {nm:>3}
#    line-numbers-left-style = brightblack
#    line-numbers-minus-style = brightblack
#    line-numbers-plus-style = brightblack
    line-numbers-right-format = {np:>3} 
#    line-numbers-right-style = brightblack
#    line-numbers-zero-style = brightblack
#    minus-emph-style = red bold
#    minus-empty-line-marker-style = omit
#    minus-style = red
#    plus-emph-style = green bold
#    plus-empty-line-marker-style = omit
#    plus-style = green
#    side-by-side = false
#    true-color = auto
#    whitespace-error-style = red reverse
#    zero-style = brightblack
#
[delta "chameleon"] # https://github.com/AirOnSkin/dotfiles/blob/main/dot_gitconfig.tmpl
  # features
  dark = true
  tabs = 2
  line-numbers = true
  side-by-side = true
  keep-plus-minus-markers = false
  syntax-theme = Nord

  # file style
  file-style = "#434C5E" bold
  file-decoration-style = "#434C5E" ul
  file-added-label = [+]
  file-copied-label = [==]
  file-modified-label = [*]
  file-removed-label = [-]
  file-renamed-label = [->]

  # hunk header style
  hunk-header-style = omit

  # line numbers style
  line-numbers-left-format = " {nm:>3} │"
  line-numbers-left-style = red
  line-numbers-right-format = " {np:>3} │"
  line-numbers-right-style = green
  line-numbers-minus-style = red black
  line-numbers-plus-style = green brightblack
  line-numbers-zero-style = "#434C5E"

  # diff style
  minus-style = bold red # line removed
  minus-emph-style = bold "#202020" red # changed part of line
  minus-non-emph-style = bold # changed line backdrop
  plus-style = bold green # line added
  plus-emph-style = bold "#202020" green # changed part of line
  plus-non-emph-style = bold # changed line backdrop

  # unchanged lines style
  zero-style = syntax

  # style for git blame
  blame-code-style = syntax
  blame-format = "{author:<18} ({commit:>9}) {timestamp:^16}"
  blame-palette = "#2E3440" "#3B4252" "#434C5E" "#4C566A"

  # merge conflict style
  merge-conflict-begin-symbol = ~
  merge-conflict-end-symbol = ~
  merge-conflict-ours-diff-header-style = yellow bold
  merge-conflict-ours-diff-header-decoration-style = "#434C5E" box
  merge-conflict-theirs-diff-header-style = yellow bold
  merge-conflict-theirs-diff-header-decoration-style = "#434C5E" box
