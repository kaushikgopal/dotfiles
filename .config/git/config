[core]
  editor = vim
  #editor = idea -e --wait
  #excludesfile   = ~/.config/git/ignore
  attributesfile = ~/.config/git/attributes
  whitespace = trailing-space,space-before-tab

[alias]
    cleaner = !git branch --merged master --no-color | grep -v '^[ *]*master$' | xargs git branch -d
    # format -> default/ original time zone (either committer’s or author’s)
    # format-local -> user's local timezone instead
    mt    = mergetool
    ss    = status --short

    a = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git add .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git add \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git add \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git add \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    ap = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git add -p .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git add -p \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git add -p \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git add -p \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    r = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git reset .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git reset \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git reset \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git reset \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    ch = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git checkout .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git checkout \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git checkout \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git checkout \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    d = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git diff .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git diff \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git diff \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git diff \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    dc = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git diff --cached .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git diff --cached \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git diff --cached \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git diff --cached \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"
    ds = "!f() { \
        if [[ $# -eq 0 || \"$1\" == \".\" ]]; then \
            git diff --staged .; \
        else \
          files_to_add=(); \
          for arg in $(seq $(git status --porcelain | wc -l)); do \
              files_to_add+=($(git status --porcelain | sed -n ${arg}p | awk '{print $2}')); \
          done; \
          if [[ $1 == *'-'* ]]; then \
              IFS='-' read -ra RANGE <<< \"$1\"; \
              for i in $(seq ${RANGE[0]} ${RANGE[1]}); do \
                  git diff --staged \"${files_to_add[$i-1]}\"; \
              done; \
          elif [[ $1 == *','* ]]; then \
              IFS=',' read -ra NUMS <<< \"$1\"; \
              for i in \"${NUMS[@]}\"; do \
                  git diff --staged \"${files_to_add[$i-1]}\"; \
              done; \
          else \
              git diff --staged \"${files_to_add[$1-1]}\"; \
          fi; \
        fi; \
    }; f"


[credential]
	helper = osxkeychain

[feature]
    manyFiles = 1

[color]
  ui = always           # all output (not intended for machine consumption) should always use color
[color "branch"]
#  current = yellow reverse
#  local = yellow
#  remote = green
[color "diff"]
#  meta = magenta bold
#  frag = cyan bold
#  old = red reverse
#  new = green reverse
#  whitespace = red reverse
[color "status"]
#  header = white normal dim
#  added = red
#  changed = green
#  untracked = blue
#  branch = yellow

[diff]
    colorMoved = default
    mnemonicprefix = true
    compactionHeuristic = true

[merge]
  tool = cursor
;   log = true
;   stat = true
;   conflictStyle = diff3
[mergetool]
  keepBackup = false
[mergetool "cursor"]
  cmd = cursor --wait $MERGED
[mergetool "idea"]
  cmd = idea merge $LOCAL $REMOTE $BASE $MERGED
  trustExitCode = true
[mergetool "meld"]
  cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
;   cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
[mergetool "vscode"]
  cmd = code --wait $MERGED

[pull]
  rebase = false

[push]
  default = tracking
  autoSetupRemote = true

[status]
  submoduleSummary = true

[url "git@github.com:"]                   # URL shorthands
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[index]
	skipHash = false
[log]
	follow = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[branch]
	sort = -committerdate
[fetch]
	prune = true

[rebase]
	updateRefs = true
    autosquash = true  # see --fixup



############################################
## DELTA
############################################
[core]
  pager = "delta"
[interactive]
  diffFilter = delta --color-only
[delta]
    navigate    = false  # use n and N to move between diff sections
    features    = chameleon
#    syntax-theme = base16
#    file-decoration-style = brightblack ul
#    file-style = box gray
#    hunk-header-decoration-style = brightblack ul
    hunk-header-style = omit
    line-numbers = true
    line-numbers-left-format = {nm:>3}
#    line-numbers-left-style = brightblack
#    line-numbers-minus-style = brightblack
#    line-numbers-plus-style = brightblack
    line-numbers-right-format = {np:>3} 
#    line-numbers-right-style = brightblack
#    line-numbers-zero-style = brightblack
#    minus-emph-style = red bold
#    minus-empty-line-marker-style = omit
#    minus-style = red
#    plus-emph-style = green bold
#    plus-empty-line-marker-style = omit
#    plus-style = green
#    side-by-side = false
#    true-color = auto
#    whitespace-error-style = red reverse
#    zero-style = brightblack
#
[diff]
    colorMoved = default
    mnemonicprefix = true
    compactionHeuristic = true
    show = delta
[pager]
  show = delta
[merge]
  conflictStyle = zdiff3

[delta "chameleon"] # https://github.com/AirOnSkin/dotfiles/blob/main/dot_gitconfig.tmpl
  # features
  dark = true
  tabs = 2
  line-numbers = true
  side-by-side = true
  keep-plus-minus-markers = false
  syntax-theme = Nord

  # file style
  file-style = "#434C5E" bold
  file-decoration-style = "#434C5E" ul
  file-added-label = [+]
  file-copied-label = [==]
  file-modified-label = [*]
  file-removed-label = [-]
  file-renamed-label = [->]

  # hunk header style
  hunk-header-style = omit

  # line numbers style
  line-numbers-left-format = " {nm:>3} │"
  line-numbers-left-style = red
  line-numbers-right-format = " {np:>3} │"
  line-numbers-right-style = green
  line-numbers-minus-style = red black
  line-numbers-plus-style = green brightblack
  line-numbers-zero-style = "#434C5E"

  # diff style
  minus-style = bold red # line removed
  minus-emph-style = bold "#202020" red # changed part of line
  minus-non-emph-style = bold # changed line backdrop
  plus-style = bold green # line added
  plus-emph-style = bold "#202020" green # changed part of line
  plus-non-emph-style = bold # changed line backdrop

  # unchanged lines style
  zero-style = syntax

  # style for git blame
  blame-code-style = syntax
  blame-format = "{author:<18} ({commit:>9}) {timestamp:^16}"
  blame-palette = "#2E3440" "#3B4252" "#434C5E" "#4C566A"

  # merge conflict style
  merge-conflict-begin-symbol = ~
  merge-conflict-end-symbol = ~
  merge-conflict-ours-diff-header-style = yellow bold
  merge-conflict-ours-diff-header-decoration-style = "#434C5E" box
  merge-conflict-theirs-diff-header-style = yellow bold
  merge-conflict-theirs-diff-header-decoration-style = "#434C5E" box
