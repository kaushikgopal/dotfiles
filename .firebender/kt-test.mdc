---
description:
globs: *Test.kt, *Test.kts
alwaysApply: false
---
# Instructions
- use a consistent, declarative testing style focusing on behavior vs implementation details
- keep tests focused, testing only one behavior per test method
- tests should be simple, contained and meaningful
- never fake-pass tests by setting values and directly asserting them
- organize test files to match the structure of the code they're testing
- tests must follow the arrange-act-assert pattern
  - separate out the each test into `// arrange` `// act` `// assert` sections
- on using fakes:
   - create fake implementations for dependencies to isolate the system under test
   - prefix fake implementations with "Fake" (e.g., `FakeAuthService`)
   - implement helper methods in fakes to control behavior and verify interactions
- on feedback:
   - keep tests fast and reliable to support continuous development
   - make test failures easy to diagnose with clear assertion messages
   - design tests to fail early when assumptions are broken

# libraries & tools

- prefer fakes over mocks
- Use `assertJ` library exclusively for all assertions
- avoid Robolectric or Turbine
